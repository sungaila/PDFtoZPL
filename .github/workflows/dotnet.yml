# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI

on:
  workflow_dispatch:
    inputs:
      build_configuration:
        type: choice
        description: Build configuration
        options: 
        - Debug
        - Release
        required: true
        default: 'Debug'
      run_build:
        type: boolean
        description: Run build
        required: true
        default: true
      run_tests:
        type: boolean
        description: Run tests
        required: true
        default: true
      publish_testresults:
        type: boolean
        description: Publish test results
        required: true
        default: true
      run_sonarcloud:
        type: boolean
        description: Run SonarCloud
        required: true
        default: true
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    name: Build
    runs-on: windows-latest
    if: (github.event_name != 'workflow_dispatch' && true || inputs.run_build) == true
    permissions:
      id-token: write
      contents: read
      attestations: write
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@main
        with:
          msbuild-architecture: x64
      - name: Setup .NET 6
        uses: actions/setup-dotnet@main
        with:
          dotnet-version: 6.x
      - name: Setup .NET 7
        uses: actions/setup-dotnet@main
        with:
          dotnet-version: 7.x
      - name: Setup .NET 8
        uses: actions/setup-dotnet@main
        with:
          dotnet-version: 8.x
      - name: Setup .NET workload android
        run: dotnet workload install android
      - name: Setup .NET workload wasm-tools
        run: dotnet workload install wasm-tools
      - name: Setup JDK 17
        uses: actions/setup-java@main
        with:
          java-version: 17
          java-package: jdk
          distribution: 'zulu'
      - name: Setup Android SDK 29
        run: C:\Android\android-sdk\cmdline-tools\latest\bin\sdkmanager "platforms;android-29"
      - name: Setup Windows 11 SDK (10.0.22621.0)
        uses: GuillaumeFalourd/setup-windows10-sdk-action@main
        with:
            sdk-version: 22621
      - name: Restore
        run: msbuild PDFtoZPL.Build.slnf /t:restore
      - name: Build
        run: msbuild PDFtoZPL.Build.slnf /p:Configuration=${{ github.event_name != 'workflow_dispatch' && 'Debug' || inputs.build_configuration }} /p:VersionSuffix=ci /p:RestorePackages=false
      - name: Pack
        run: msbuild PDFtoZPL/PDFtoZPL.csproj /t:pack /p:Configuration=${{ github.event_name != 'workflow_dispatch' && 'Debug' || inputs.build_configuration }} /p:VersionSuffix=ci /p:RestorePackages=false
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@main
        with:
          subject-path: PDFtoZPL/bin/${{ github.event_name != 'workflow_dispatch' && 'Debug' || inputs.build_configuration }}/*.nupkg
      - name: Publish libraries
        uses: actions/upload-artifact@v4
        with:
          name: Library assemblies
          path: |
            PDFtoZPL/bin/${{ github.event_name != 'workflow_dispatch' && 'Debug' || inputs.build_configuration }}
            !**/*.nupkg
            !**/*.snupkg
          if-no-files-found: error
      - name: Publish NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: NuGet packages
          path: |
            PDFtoZPL/bin/${{ github.event_name != 'workflow_dispatch' && 'Debug' || inputs.build_configuration }}/*.nupkg
            PDFtoZPL/bin/${{ github.event_name != 'workflow_dispatch' && 'Debug' || inputs.build_configuration }}/*.snupkg
          if-no-files-found: error
      - name: Publish tests
        uses: actions/upload-artifact@v4
        if: success() && (github.event_name != 'workflow_dispatch' && true || inputs.run_tests) == true
        with:
          name: Test assemblies
          path: Tests/bin/${{ github.event_name != 'workflow_dispatch' && 'Debug' || inputs.build_configuration }}
          if-no-files-found: error
          retention-days: 1
  test:
    name: Test (${{ matrix.os }})
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, windows-2022, ubuntu-20.04, ubuntu-22.04, macos-12, macos-13, macos-14]
    runs-on: ${{ matrix.os }}
    if: success() && (github.event_name != 'workflow_dispatch' && true || inputs.run_tests) == true
    steps:
      - name: Setup .NET 6
        uses: actions/setup-dotnet@main
        with:
          dotnet-version: 6.x
      - name: Setup .NET 7
        uses: actions/setup-dotnet@main
        with:
          dotnet-version: 7.x
      - name: Setup .NET 8
        uses: actions/setup-dotnet@main
        with:
          dotnet-version: 8.x
      - name: Download test assemblies
        uses: actions/download-artifact@v4
        with:
          name: Test assemblies
      - name: .NET Framework 4.6.2
        if: runner.os == 'Windows' && success()
        run: dotnet test net462/*.Tests.dll --logger trx --verbosity detailed
      - name: .NET Framework 4.7.1
        if: runner.os == 'Windows' && (success() || failure())
        run: dotnet test net471/*.Tests.dll --logger trx --verbosity detailed
      - name: .NET Framework 4.8.1
        if: runner.os == 'Windows' && (success() || failure())
        run: dotnet test net481/*.Tests.dll --logger trx --verbosity detailed
      - name: .NET 6
        if: success() || failure()
        run: dotnet test net6.0/*.Tests.dll --logger trx --verbosity detailed
      - name: .NET 7
        if: success() || failure()
        run: dotnet test net7.0/*.Tests.dll --logger trx --verbosity detailed
      - name: .NET 8
        if: success() || failure()
        run: dotnet test net8.0/*.Tests.dll --logger trx --verbosity detailed
      - name: Upload test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: Test results (${{ matrix.os }})
          path: ./**/*.trx
          if-no-files-found: error
          retention-days: 1
  publish-test-results:
    name: Publish tests results
    needs: test
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    concurrency:
      group: "publish-test-results"
      cancel-in-progress: false
    if: (success() || failure()) && (github.event_name != 'workflow_dispatch' && true || inputs.publish_testresults) == true
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: Test results (*)
          merge-multiple: true
          path: artifacts
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@master
        with:
          files: artifacts/**/*.trx
          check_name: Test results
          compare_to_earlier_commit: false
          action_fail_on_inconclusive: true
          json_file: test-results.json
      - name: Upload test results to GitHub Gist
        if: github.repository == 'sungaila/PDFtoZPL' && github.ref == 'refs/heads/master' && success()
        uses: exuanbo/actions-deploy-gist@main
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gist_id: 47230c16cb63a1be5b5604830579714d
          gist_description: ${{ github.repository }} test results as JSON
          gist_file_name: ${{ github.repository_owner }}_${{ github.event.repository.name }}_test-results.json
          file_path: test-results.json
          file_type: text
  sonarcloud:
    name: SonarCloud
    runs-on: windows-latest
    if: (github.repository == 'sungaila/PDFtoZPL' && success()) && (github.event_name != 'workflow_dispatch' && true || inputs.run_sonarcloud) == true
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@main
        with:
          msbuild-architecture: x64
      - name: Setup .NET 6
        uses: actions/setup-dotnet@main
        with:
           dotnet-version: 6.x
      - name: Setup .NET 7
        uses: actions/setup-dotnet@main
        with:
          dotnet-version: 7.x
      - name: Setup .NET 8
        uses: actions/setup-dotnet@main
        with:
          dotnet-version: 8.x
      - name: Setup dotnet-coverage
        run: dotnet tool install --global dotnet-coverage
      - name: Setup .NET workload android
        run: dotnet workload install android
      - name: Setup JDK 17
        uses: actions/setup-java@main
        with:
          java-version: 17
          java-package: jdk
          distribution: 'zulu'
      - name: Setup Android SDK 29
        run: C:\Android\android-sdk\cmdline-tools\latest\bin\sdkmanager "platforms;android-29"
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"sungaila_PDFtoZPL" /o:"sungaila" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet restore PDFtoZPL.SonarCloud.slnf
          msbuild PDFtoZPL.SonarCloud.slnf /p:Configuration=${{ github.event_name != 'workflow_dispatch' && 'Debug' || inputs.build_configuration }}
          dotnet-coverage collect "dotnet test PDFtoZPL.SonarCloud.slnf --verbosity detailed" -f xml -o "coverage.xml"
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"